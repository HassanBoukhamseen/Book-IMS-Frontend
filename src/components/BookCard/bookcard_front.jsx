import React, { useState } from 'react';
import styles from './styles.module.css';
import book_cover from '../../assets/book_cover.png';
import registerLikedBook from "../../services/registerLikedBook"
import removeLikedBook from "../../services/removeLikedBook"

function process_authors(author) {
    const limit = 25;
    author = author.split(' ').map(author => author.charAt(0).toUpperCase() + author.slice(1)).join(' ');
    if (author.length >= limit) {
        return author.slice(0, limit - 2) + '...';
    } else {
        return author;
    }
}

function process_titles(title) {
    const limit = 25;
    title = title.split(' ').map(title => title.charAt(0).toUpperCase() + title.slice(1)).join(' ');
    if (title.length >= limit) {
        return title.slice(0, limit - 2) + '...';
    } else {
        return title;
    }
}

function process_genre(genre) {
    const limit = 20;
    genre = genre.split(' ').map(genre => genre.charAt(0).toUpperCase() + genre.slice(1)).join(' ');
    if (genre.length >= limit) {
        return genre.slice(0, limit - 2) + '...';
    } else {
        return genre;
    }
}

const BookCardFront = (props) => {
    const [liked, setLiked] = useState(props.loggedIn && props.book.liked ? true : false);
    const toggleLike = async () => {
        if (!props.loggedIn) {
            alert("You need to log in")
        } else {
            if (props.book.liked === 0) {
                registerLikedBook(props.book.book_id, props.token)
                props.book.liked = 1
            } else {
                removeLikedBook(props.book.book_id, props.token)
                props.book.liked = 0
            }
            setLiked(!liked);
        }
    };

    return (
        <div className={styles["book-card-front"]}>
            <div className={styles["card-header"]}>
                <div className={styles["book-info"]}>
                    <p className={styles["book-title"]}>{process_titles(props.book.title)}</p>
                    <div className={styles["author-year"]}>
                        <p style={{ "background": "transparent", "fontSize": "12px", "marginLeft": "6%" }}>{process_authors(props.book.author_name)}</p>
                        <p style={{ "background": "transparent", "fontSize": "12px", "marginLeft": "10%" }}>{props.book.year}</p>
                    </div>
                </div>
                <div onClick={toggleLike} style={{backgroundColor: "transparent"}}>
                    {liked ? (
                        <svg className={styles["like"]} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#FF529A">
                            <mask id="mask0_85_10674" style={{ maskType: "luminance" }} maskUnits="userSpaceOnUse" x="2" y="3" width="21" height="20">
                                <path fillRule="evenodd" clipRule="evenodd" d="M2 2.99991H22.4725V22.5009H2V2.99991Z" fill="white" />
                            </mask>
                            <g mask="url(#mask0_85_10674)">
                                <path fillRule="evenodd" clipRule="evenodd" d="M3.82371 12.123C5.22571 16.485 10.7647 20.012 12.2367 20.885C13.7137 20.003 19.2927 16.437 20.6497 12.127C21.5407 9.341 20.7137 5.812 17.4277 4.753C15.8357 4.242 13.9787 4.553 12.6967 5.545C12.4287 5.751 12.0567 5.755 11.7867 5.551C10.4287 4.53 8.65471 4.231 7.03771 4.753C3.75671 5.811 2.93271 9.34 3.82371 12.123ZM12.2377 22.501C12.1137 22.501 11.9907 22.471 11.8787 22.41C11.5657 22.239 4.19271 18.175 2.39571 12.581C2.39471 12.581 2.39471 12.58 2.39471 12.58C1.26671 9.058 2.52271 4.632 6.57771 3.325C8.48171 2.709 10.5567 2.98 12.2347 4.039C13.8607 3.011 16.0207 2.727 17.8867 3.325C21.9457 4.634 23.2057 9.059 22.0787 12.58C20.3397 18.11 12.9127 22.235 12.5977 22.408C12.4857 22.47 12.3617 22.501 12.2377 22.501Z" fill="#FF529A" />
                            </g>
                            <path d="M11.9792 8.83148C11.9792 7.97133 12.2344 6.53259 11.6091 5.87043C11.2965 5.53946 10.7543 5.48649 10.3177 5.42627C9.62581 5.33084 8.98378 5.27822 8.28198 5.27822C7.91706 5.27822 7.38755 5.18163 7.03587 5.29467C6.51779 5.46119 5.86485 6.00178 5.58824 6.45441C5.30123 6.92408 4.90232 7.3724 4.66703 7.86914C4.32226 8.59698 4.35447 9.50919 4.35447 10.2956C4.35447 10.9638 4.27379 11.7816 4.47374 12.4259C4.74374 13.2959 5.37239 14.1227 5.9995 14.77C6.99839 15.8011 7.87836 16.8967 8.98112 17.8298C9.89679 18.6046 11.5026 20.2235 12.7688 19.4131C13.6355 18.8584 14.3244 18.1742 15.0472 17.4514C15.561 16.9376 16.0817 16.3617 16.5112 15.7735C16.9881 15.1204 17.6031 14.5634 18.0329 13.8817C18.4825 13.1685 19.0599 12.4421 19.3448 11.6445C19.4275 11.4128 19.6039 10.7076 19.6039 10.9536C19.6039 11.2091 19.46 11.4509 19.3818 11.6897C19.2289 12.1571 19.1216 12.6643 18.8636 13.088C18.6633 13.4171 18.449 13.7653 18.3084 14.1244C18.1627 14.4968 17.8698 14.8366 17.6792 15.1977C17.5708 15.4031 17.406 15.5779 17.2803 15.7735C16.9839 16.2346 17.564 14.7129 17.7532 14.1984C18.1735 13.0559 18.6014 11.9657 19.2091 10.9124C19.4341 10.5225 19.9 9.98541 19.9 9.51417C19.9 9.03879 19.9224 8.54907 19.7931 8.0871C19.685 7.70114 19.3645 7.42229 19.1227 7.12476C18.541 6.40879 17.3054 6.00111 16.4208 5.77995C15.4476 5.53666 14.5389 5.61001 13.6242 6.00203C12.8024 6.35422 11.9451 6.75874 11.0374 6.75874C10.1774 6.75874 9.32883 6.83277 8.47116 6.83277C7.74782 6.83277 7.32371 7.43562 7.13046 8.05832C6.70008 9.44508 6.71302 11.2816 7.22505 12.6315C7.75903 14.0393 8.89188 15.5157 9.94757 16.5713C10.5462 17.17 11.278 17.5549 12.0779 17.8216C12.2482 17.8783 12.4873 17.9964 12.6701 17.912C13.0932 17.7167 13.4544 17.2457 13.764 16.9209C14.2167 16.4461 14.6839 15.9662 15.0677 15.4322C15.7114 14.5367 16.2744 13.4853 16.8073 12.5163C17.5128 11.2336 18.0532 9.64448 17.9753 8.16524C17.9565 7.80754 16.5115 7.78224 16.3056 7.75399C14.5118 7.50778 12.6883 7.73526 10.8852 7.61005C10.3854 7.57534 9.88899 7.57303 9.38826 7.57303C9.06345 7.57303 8.65449 7.50008 8.35189 7.64706C8.25524 7.694 8.08819 7.77316 8.13804 7.91026C8.19387 8.0638 8.41387 8.20128 8.52462 8.30096C8.90376 8.64218 9.25986 9.01016 9.65147 9.33733C10.901 10.3813 12.4105 10.4535 13.9614 10.5917C14.5447 10.6436 15.1193 10.6821 15.7052 10.6821C15.8827 10.6821 16.1287 10.7384 16.2727 10.6081C16.4351 10.4612 16.6119 10.3322 16.7868 10.201C17.0111 10.0328 15.9232 9.71044 15.8409 9.67867C14.54 9.17636 13.5489 9.04824 12.2259 9.54707C11.2565 9.91258 10.1902 10.2693 9.32657 10.8631C8.91112 11.1487 9.48586 11.7903 9.64735 12.0475C10.1129 12.7889 11.1509 13.9611 12.1684 13.6103C12.5953 13.4631 12.9961 13.0946 13.3857 12.8659C13.5249 12.7842 14.0803 12.5262 14.1218 12.3395C14.2085 11.9494 13.7581 11.574 13.5091 11.3648C13.0075 10.9434 12.2515 10.4101 11.5515 10.4601C11.3513 10.4744 11.1672 12.8163 11.1649 12.9934C11.1574 13.5607 11.1649 14.1286 11.1649 14.696C11.1649 14.9225 11.2841 14.947 11.424 15.1237C11.6622 15.4246 12.0693 15.83 12.4974 15.7077C12.7038 15.6487 12.9503 15.1204 13.0896 14.9592C13.3637 14.6421 13.6309 14.3194 13.8134 13.9393C14.0593 13.427 14.3186 12.9313 14.5948 12.4341C14.7975 12.0692 14.7752 11.924 14.7182 11.4964" stroke="#FF529A" strokeWidth="3" strokeLinecap="round" />
                            <path fillRule="evenodd" clipRule="evenodd" d="M18.6664 9.92116C18.2794 9.92116 17.9514 9.62416 17.9194 9.23216C17.8534 8.41016 17.3034 7.71616 16.5204 7.46316C16.1254 7.33516 15.9094 6.91216 16.0364 6.51916C16.1654 6.12516 16.5844 5.91116 16.9804 6.03516C18.3434 6.47616 19.2984 7.68316 19.4154 9.11016C19.4484 9.52316 19.1414 9.88516 18.7284 9.91816C18.7074 9.92016 18.6874 9.92116 18.6664 9.92116Z" fill="white" />
                        </svg>
                    ) : (
                        <svg className={styles["like"]} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#FFFFFF">
                            <mask id="mask0_1_1877" style={{ maskType: "luminance" }} maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="21">
                                <path fillRule="evenodd" clipRule="evenodd" d="M2 2.99988H22.4725V22.5009H2V2.99988Z" fill="#FFFFFF" />
                            </mask>
                            <g mask="url(#mask0_1_1877)">
                                <path fillRule="evenodd" clipRule="evenodd" d="M3.82371 12.123C5.22571 16.485 10.7647 20.012 12.2367 20.885C13.7137 20.003 19.2927 16.437 20.6497 12.127C21.5407 9.341 20.7137 5.812 17.4277 4.753C15.8357 4.242 13.9787 4.553 12.6967 5.545C12.4287 5.751 12.0567 5.755 11.7867 5.551C10.4287 4.53 8.65471 4.231 7.03771 4.753C3.75671 5.811 2.93271 9.34 3.82371 12.123ZM12.2377 22.501C12.1137 22.501 11.9907 22.471 11.8787 22.41C11.5657 22.239 4.19271 18.175 2.39571 12.581C2.39471 12.581 2.39471 12.58 2.39471 12.58C1.26671 9.058 2.52271 4.632 6.57771 3.325C8.48171 2.709 10.5567 2.98 12.2347 4.039C13.8607 3.011 16.0207 2.727 17.8867 3.325C21.9457 4.634 23.2057 9.059 22.0787 12.58C20.3397 18.11 12.9127 22.235 12.5977 22.408C12.4857 22.47 12.3617 22.501 12.2377 22.501Z" fill="#FFFFFF" />
                            </g>
                            <path fillRule="evenodd" clipRule="evenodd" d="M18.1537 10.6249C17.7667 10.6249 17.4387 10.3279 17.4067 9.9359C17.3407 9.1139 16.7907 8.4199 16.0077 8.1669C15.6127 8.0389 15.3967 7.6159 15.5237 7.2229C15.6527 6.8289 16.0717 6.6149 16.4677 6.7389C17.8307 7.1799 18.7857 8.3869 18.9027 9.8139C18.9357 10.2269 18.6287 10.5889 18.2157 10.6219C18.1947 10.6239 18.1747 10.6249 18.1537 10.6249Z" fill="#FFFFFF" />
                        </svg>
                    )}
                </div>
            </div>
            <img
                className={styles["book-cover"]}
                src={props.book.thumbnail}
                alt="book cover"
                onError={(e) => { e.target.src = book_cover; }}
                onClick={props.onImageClick}
            />
            <div className={styles["card-bottom"]}>
                <p className={styles["genre"]}> {process_genre(props.book.genre)} </p>
                <div className={styles["ratings"]}>
                    <svg className={styles["star"]} xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="FFE45A">
                        <path fillRule="evenodd" clipRule="evenodd" d="M11.7499 4.5C11.6589 4.5 11.4349 4.525 11.3159 4.763L9.48992 8.414C9.20092 8.991 8.64392 9.392 7.99992 9.484L3.91192 10.073C3.64192 10.112 3.54992 10.312 3.52192 10.396C3.49692 10.477 3.45692 10.683 3.64292 10.861L6.59892 13.701C7.06992 14.154 7.28392 14.807 7.17192 15.446L6.47592 19.456C6.43292 19.707 6.58992 19.853 6.65992 19.903C6.73392 19.959 6.93192 20.07 7.17692 19.942L10.8319 18.047C11.4079 17.75 12.0939 17.75 12.6679 18.047L16.3219 19.941C16.5679 20.068 16.7659 19.957 16.8409 19.903C16.9109 19.853 17.0679 19.707 17.0249 19.456L16.3269 15.446C16.2149 14.807 16.4289 14.154 16.8999 13.701L19.8559 10.861C20.0429 10.683 20.0029 10.476 19.9769 10.396C19.9499 10.312 19.8579 10.112 19.5879 10.073L15.4999 9.484C14.8569 9.392 14.2999 8.991 14.0109 8.413L12.1829 4.763C12.0649 4.525 11.8409 4.5 11.7499 4.5ZM6.94692 21.5C6.53392 21.5 6.12392 21.37 5.77292 21.114C5.16692 20.67 4.86992 19.937 4.99892 19.199L5.69492 15.189C5.72092 15.04 5.66992 14.889 5.55992 14.783L2.60392 11.943C2.05992 11.422 1.86492 10.652 2.09492 9.937C2.32692 9.214 2.94092 8.697 3.69792 8.589L7.78592 8C7.94392 7.978 8.07992 7.881 8.14792 7.743L9.97492 4.091C10.3119 3.418 10.9919 3 11.7499 3C12.5079 3 13.1879 3.418 13.5249 4.091L15.3529 7.742C15.4219 7.881 15.5569 7.978 15.7139 8L19.8019 8.589C20.5589 8.697 21.1729 9.214 21.4049 9.937C21.6349 10.652 21.4389 11.422 20.8949 11.943L17.9389 14.783C17.8289 14.889 17.7789 15.04 17.8049 15.188L18.5019 19.199C18.6299 19.938 18.3329 20.671 17.7259 21.114C17.1109 21.565 16.3099 21.626 15.6309 21.272L11.9779 19.379C11.8349 19.305 11.6639 19.305 11.5209 19.379L7.86792 21.273C7.57592 21.425 7.26092 21.5 6.94692 21.5Z" fill="#FFE45A" />
                    </svg>
                    <div style={{ "backgroundColor": "transparent", "marginTop": "3%" }}>
                        {props.book.average_rating}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default BookCardFront;
